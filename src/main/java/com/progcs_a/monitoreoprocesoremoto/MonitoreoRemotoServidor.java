/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.progcs_a.monitoreoprocesoremoto;

import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author Angel Vazquez
 */
public class MonitoreoRemotoServidor extends javax.swing.JFrame implements Runnable {

    /**
     *
     */
    public MonitoreoRemotoServidor() {
        initComponents();
        Thread hilo= new Thread(this);
        hilo.start();
        setLayout(new FlowLayout());
        JButton bapagar=new JButton("Apagar");
    }

    /**
     *
     */
 
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonitoreoRemotoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonitoreoRemotoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonitoreoRemotoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonitoreoRemotoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.out.println("Entro al hilo de ejecución");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitoreoRemotoServidor().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
     //To change body of generated methods, choose Tools | Templates.
     System.out.println("Entro al hilo de ejecución");
     try
     {
      ServerSocket Servidor= new ServerSocket(8000);
      Socket Cliente;
         Runtime r = Runtime.getRuntime();
      while(true)
      {     
                Cliente = Servidor.accept();
                ObjectInputStream flujoDatos = new ObjectInputStream(Cliente.getInputStream());
                Orden cmd = (Orden)flujoDatos.readObject();
                System.out.println("Orden enviada" + cmd.getOrden());     
      switch(cmd.getOrden().toUpperCase())
      {
          
      case"CAMARA":
      {
      r.exec("cmd /c start microsoft.windows.camera:");
      
      }
      break;
      
      case "YOUTUBE":{
          r.exec("cmd /c start chrome https://www.youtube.com/watch?v=dQw4w9WgXcQ");
   
      }break;
      
      case "EXPLORADOR":{
          r.exec("cmd /c explorer.exe");
      }break;
      }
      
      
      
      
      }
      
      
     }
     catch(Exception ex)
     {


     } 
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
